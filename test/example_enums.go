// Code generated by stringenum - DO NOT EDIT.
package test

import (
	"fmt"
	"strings"
)

// ExampleEnumValues contains all possible values of ExampleEnum.
var ExampleEnumValues = []ExampleEnum{
	Enum1,
	Enum2,
	Enum3,
	Enum4,
}

// ExampleEnumFromValue returns a ExampleEnum for given value.
func ExampleEnumFromValue(s string) (v ExampleEnum, err error) {
	v = (ExampleEnum)(s)
	if !v.IsValid() {
		err = fmt.Errorf("%s is not a valid ExampleEnum", s)
		return
	}
	return v, nil
}

// IsExampleEnum returns true if given value is a valid ExampleEnum.
func (v ExampleEnum) IsValid() bool {
	for _, val := range ExampleEnumValues {
		if val == v {
			return true
		}
	}
	return false
}

// ExampleEnum returns an error if the value is not valid.
func (v ExampleEnum) Validate() error {
	if _, err := ExampleEnumFromValue(string(v)); err != nil {
		var values = []string{
			"hello",
			"world",
			"goos",
			"geese",
		}
		return fmt.Errorf("%w. possible values are: %s", err, strings.Join(values, ", "))
	}
	return nil
}

// String returns a string value of ExampleEnum.
func (v ExampleEnum) String() string {
	return string(v)
}

// MarshalText implements encoding.TextMarshaler interface which is compatible with JSON, YAML.
func (v ExampleEnum) MarshalText() ([]byte, error) {
	return []byte(v), nil
}

// UnmarshalText implements encoding.TextUnmarshaler interface which is compatible with JSON, YAML.
func (v *ExampleEnum) UnmarshalText(d []byte) (err error) {
	*v, err = ExampleEnumFromValue(string(d))
	return
}
